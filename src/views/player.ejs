<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BsmTracker Player</title>
  </head>
  <body
    style="
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    "
  >
    <h1 style="font-size: 50px">BsmTracker Player</h1>
    <p>소켓을 통해서 노래 재생 명령을 받아 플레이합니다</p>
    <p>소켓을 통해서 노래 중지 명령을 받아 중지합니다</p>
    <p>1. 라즈베리파이에 해당 페이지를 설치합니다</p>
    <p>2. 해당페이지 권한에서 소리 설정을 허용으로 변환해야합니다</p>
    <img src="/uploads/yes.png" />
    <source src="sound.mp3" type="audio/mpeg" />
  </body>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io.connect('/player', {
      transports: ['websocket'],
      autoConnect: false,
      reconnection: true,
    });

    let volume = 0;
    let currentAudio = null;
    let currentBroadCast = null;

    function affectVolume() {
      if (currentAudio && currentBroadCast) {
        currentAudio.volume = volume / 5;
        currentBroadCast.volume = volume;
      } else if (currentAudio) {
        currentAudio.volume = volume;
      } else if (currentBroadCast) {
        currentBroadCast.volume = volume;
      }
    }

    socket.on('pause', function () {
      console.log('pause');
      if (currentAudio) {
        currentAudio.pause();
      }
      currentAudio = null;
      affectVolume();
    });

    socket.on('play', function (data) {
      if (currentAudio) {
        currentAudio.pause();
      }
      console.log(data?.src);
      currentAudio = new Audio(data.src);
      console.log('play----');
      affectVolume();
      console.log(data.startTime / 1000);
      currentAudio.currentTime = data.startTime / 1000;
      currentAudio.play();
      currentAudio.onended = () => {
        currentAudio = null;
      };
    });

    socket.on('broadcastPause', function (data) {
      if (currentBroadCast) {
        currentBroadCast.pause();
        currentBroadCast = null;
      }
      affectVolume();
    });

    socket.on('broadcastPlay', function (data) {
      if (currentBroadCast) {
        currentBroadCast.pause();
      }
      currentBroadCast = new Audio(data.src);
      affectVolume();
      //max
      currentBroadCast.currentTime = 0;
      currentBroadCast.play();
      currentBroadCast.onended = () => {
        currentBroadCast = null;
        affectVolume();
      };
    });

    socket.on('volume', function (data) {
      if (data < 0 || data > 100) return;
      volume = data / 100;
      affectVolume();
    });

    socket.on('disconnect', function (data) {
      if (currentAudio) {
        currentAudio.pause();
      }
      currentAudio = null;
      affectVolume();
    });

    socket.connect();
  </script>
</html>
